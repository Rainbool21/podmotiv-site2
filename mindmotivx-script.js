// MindMotivX JavaScript

class MindMotivX {
    constructor() {
        this.exercises = [
            {
                id: 1,
                name: "–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è",
                duration: "10 –º–∏–Ω—É—Ç",
                description: "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ —É–º–∞",
                completed: false,
                icon: "üßò"
            },
            {
                id: 2,
                name: "–ß—Ç–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã",
                duration: "30 –º–∏–Ω—É—Ç",
                description: "–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä —É—Å–ø–µ—à–Ω—ã—Ö –ª—é–¥–µ–π",
                completed: false,
                icon: "üìö"
            },
            {
                id: 3,
                name: "–ó–∞–ø–∏—Å—å 3 –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π",
                duration: "5 –º–∏–Ω—É—Ç",
                description: "–ó–∞–ø–∏—à–∏ —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω",
                completed: false,
                icon: "üôè"
            },
            {
                id: 4,
                name: "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è",
                duration: "10 –º–∏–Ω—É—Ç",
                description: "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                completed: false,
                icon: "üìù"
            },
            {
                id: 5,
                name: "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                duration: "30 –º–∏–Ω—É—Ç",
                description: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ç–µ–ª–∞ –∏ —É–º–∞",
                completed: false,
                icon: "üí™"
            }
        ];
        
        this.dailyChecklist = [
            "–ü—Ä–æ—Å–Ω—É–ª—Å—è –¥–æ 6:00",
            "–í—ã–ø–∏–ª —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã",
            "–°–¥–µ–ª–∞–ª —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–∞–∫—Ç–∏–∫—É",
            "–ü—Ä–æ—á–∏—Ç–∞–ª 10 —Å—Ç—Ä–∞–Ω–∏—Ü",
            "–ó–∞–ø–∏—Å–∞–ª —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å",
            "–í—ã–ø–æ–ª–Ω–∏–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            "–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å",
            "–õ—ë–≥ —Å–ø–∞—Ç—å –¥–æ 22:00"
        ];
        
        this.currentQuoteIndex = 0;
        this.quotes = [
            {
                text: "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å. –≠—Ç–æ —Ç—è–∂–µ–ª–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –æ–±—É—á–µ–Ω–∏–µ, –∏–∑—É—á–µ–Ω–∏–µ, –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ –∏, –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ, –ª—é–±–æ–≤—å –∫ —Ç–æ–º—É, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ.",
                author: "–ü–µ–ª–µ"
            },
            {
                text: "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ —ç—Ç–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å.",
                author: "–°—Ç–∏–≤ –î–∂–æ–±—Å"
            },
            {
                text: "–ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã.",
                author: "–≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç"
            },
            {
                text: "–ù–µ –±–æ–π—Ç–µ—Å—å –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –æ—Ç —Ö–æ—Ä–æ—à–µ–≥–æ —Ä–∞–¥–∏ –≤–µ–ª–∏–∫–æ–≥–æ.",
                author: "–î–∂–æ–Ω –†–æ–∫—Ñ–µ–ª–ª–µ—Ä"
            },
            {
                text: "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî —ç—Ç–æ –º–æ—Å—Ç –º–µ–∂–¥—É —Ü–µ–ª—è–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.",
                author: "–î–∂–∏–º –†–æ–Ω"
            },
            {
                text: "–í–∞—à–µ –≤—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–µ —Ç—Ä–∞—Ç—å—Ç–µ –µ–≥–æ, –∂–∏–≤—è —á—É–∂–æ–π –∂–∏–∑–Ω—å—é.",
                author: "–°—Ç–∏–≤ –î–∂–æ–±—Å"
            },
            {
                text: "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –∏–¥—Ç–∏ –æ—Ç –æ–¥–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –∫ –¥—Ä—É–≥–æ–π, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
                author: "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"
            },
            {
                text: "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–µ–±—è. –í–∞—à —Ä–∞–∑—É–º ‚Äî —ç—Ç–æ —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å.",
                author: "–£–æ—Ä—Ä–µ–Ω –ë–∞—Ñ—Ñ–µ—Ç"
            }
        ];
        
        // –ú–æ–±–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.isMobile = window.innerWidth <= 768;
        this.touchStartY = 0;
        this.touchStartX = 0;
        this.isPulling = false;
        this.pullDistance = 0;
        this.gestureStartX = 0;
        this.gestureStartY = 0;
        this.isGestureActive = false;
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.setupTheme();
        this.setupNavigation();
        this.loadProgress();
        this.updateDate();
        this.renderExercises();
        this.renderChecklist();
        this.setupMotivationSlider();
        this.updateStats();
        
        // –ú–æ–±–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if (this.isMobile) {
            this.mobileFeatures = new MobileFeatures(this);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        setTimeout(() => {
            this.setupMotivationCards();
            this.setupCardFiltering();
        }, 100);
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ –≤ hero —Å–µ–∫—Ü–∏–∏
        document.getElementById('start-practice').addEventListener('click', () => {
            document.getElementById('practice-section').scrollIntoView({ behavior: 'smooth' });
        });

        document.getElementById('view-exercises').addEventListener('click', () => {
            document.getElementById('exercises-section').scrollIntoView({ behavior: 'smooth' });
        });

        // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        document.getElementById('save-progress').addEventListener('click', () => {
            this.saveProgress();
        });

        // –ö–Ω–æ–ø–∫–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        const prevQuoteBtn = document.getElementById('prev-quote');
        const nextQuoteBtn = document.getElementById('next-quote');
        
        if (prevQuoteBtn) {
            prevQuoteBtn.addEventListener('click', () => {
                this.prevQuote();
            });
        }
        
        if (nextQuoteBtn) {
            nextQuoteBtn.addEventListener('click', () => {
                this.nextQuote();
            });
        }
    }

    // ===== –ú–û–ë–ò–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
    
    setupMobileFeatures() {
        this.setupPullToRefresh();
        this.setupGestureNavigation();
        this.setupMobileFab();
        this.setupBottomSheet();
        this.setupTouchEffects();
        this.setupMobileProgressRing();
        this.setupMobileAnimations();
        this.setupMobileConfetti();
        this.setupMobileSpotlight();
        this.setupMobileMagnetic();
        this.setupMobileVibration();
    }

    setupPullToRefresh() {
        const pullIndicator = document.getElementById('pull-indicator');
        
        document.addEventListener('touchstart', (e) => {
            this.touchStartY = e.touches[0].clientY;
            this.touchStartX = e.touches[0].clientX;
        });

        document.addEventListener('touchmove', (e) => {
            if (window.scrollY === 0) {
                const touchY = e.touches[0].clientY;
                const touchX = e.touches[0].clientX;
                const deltaY = touchY - this.touchStartY;
                const deltaX = Math.abs(touchX - this.touchStartX);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø
                if (deltaY > 0 && deltaY > deltaX && deltaY > 50) {
                    this.isPulling = true;
                    this.pullDistance = Math.min(deltaY * 0.5, 100);
                    
                    if (pullIndicator) {
                        pullIndicator.style.transform = `translateX(-50%) translateY(${this.pullDistance}px)`;
                        pullIndicator.style.opacity = this.pullDistance / 100;
                    }
                }
            }
        });

        document.addEventListener('touchend', () => {
            if (this.isPulling && this.pullDistance > 80) {
                this.triggerPullToRefresh();
            }
            
            if (pullIndicator) {
                pullIndicator.style.transform = 'translateX(-50%) translateY(0px)';
                pullIndicator.style.opacity = 0;
            }
            
            this.isPulling = false;
            this.pullDistance = 0;
        });
    }

    triggerPullToRefresh() {
        const pullIndicator = document.getElementById('pull-indicator');
        if (pullIndicator) {
            pullIndicator.classList.add('active');
        }
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        setTimeout(() => {
            this.loadProgress();
            this.updateStats();
            this.showNotification('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', 'success');
            
            if (pullIndicator) {
                pullIndicator.classList.remove('active');
            }
        }, 1500);
    }

    setupGestureNavigation() {
        const gestureArea = document.getElementById('gesture-area');
        
        if (!gestureArea) return;
        
        gestureArea.addEventListener('touchstart', (e) => {
            this.gestureStartX = e.touches[0].clientX;
            this.gestureStartY = e.touches[0].clientY;
            this.isGestureActive = true;
        });

        gestureArea.addEventListener('touchmove', (e) => {
            if (!this.isGestureActive) return;
            
            const touchX = e.touches[0].clientX;
            const touchY = e.touches[0].clientY;
            const deltaX = touchX - this.gestureStartX;
            const deltaY = Math.abs(touchY - this.gestureStartY);
            
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
            if (deltaX > 100 && deltaY < 50) {
                this.openMobileMenu();
                this.isGestureActive = false;
            }
        });

        gestureArea.addEventListener('touchend', () => {
            this.isGestureActive = false;
        });
    }

    openMobileMenu() {
        const navMenu = document.querySelector('.nav-menu');
        const navToggle = document.getElementById('nav-toggle');
        
        if (navMenu && navToggle) {
            navMenu.classList.add('active');
            navToggle.classList.add('active');
        }
    }

    setupMobileFab() {
        const mobileFab = document.getElementById('mobile-fab');
        const bottomSheet = document.getElementById('mobile-bottom-sheet');
        
        if (mobileFab && bottomSheet) {
            mobileFab.addEventListener('click', () => {
                bottomSheet.classList.add('active');
                this.addMobileVibration();
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ bottom sheet –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
            bottomSheet.addEventListener('click', (e) => {
                if (e.target === bottomSheet) {
                    bottomSheet.classList.remove('active');
                }
            });
        }
    }

    setupBottomSheet() {
        const quickActionBtns = document.querySelectorAll('.quick-action-btn');
        const bottomSheet = document.getElementById('mobile-bottom-sheet');
        
        quickActionBtns.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = btn.dataset.action;
                this.handleQuickAction(action);
                bottomSheet.classList.remove('active');
                this.addMobileVibration();
            });
        });
    }

    handleQuickAction(action) {
        switch (action) {
            case 'meditation':
                this.showNotification('–ó–∞–ø—É—Å–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–∏...', 'info');
                setTimeout(() => {
                    document.getElementById('practice-section').scrollIntoView({ behavior: 'smooth' });
                }, 500);
                break;
            case 'reading':
                this.showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...', 'info');
                break;
            case 'exercise':
                this.showNotification('–ó–∞–ø—É—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...', 'info');
                setTimeout(() => {
                    document.getElementById('exercises-section').scrollIntoView({ behavior: 'smooth' });
                }, 500);
                break;
            case 'planning':
                this.showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...', 'info');
                break;
        }
    }

    setupTouchEffects() {
        // Touch ripple effect
        const touchRippleElements = document.querySelectorAll('.touch-ripple');
        
        touchRippleElements.forEach(element => {
            element.addEventListener('touchstart', (e) => {
                const rect = element.getBoundingClientRect();
                const x = e.touches[0].clientX - rect.left;
                const y = e.touches[0].clientY - rect.top;
                
                element.style.setProperty('--ripple-x', x + 'px');
                element.style.setProperty('--ripple-y', y + 'px');
            });
        });

        // 3D tilt effect
        const tiltElements = document.querySelectorAll('.mobile-3d-tilt');
        
        tiltElements.forEach(element => {
            element.addEventListener('touchmove', (e) => {
                const rect = element.getBoundingClientRect();
                const x = e.touches[0].clientX - rect.left;
                const y = e.touches[0].clientY - rect.top;
                
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                
                const rotateX = (y - centerY) / centerY * 10;
                const rotateY = (centerX - x) / centerX * 10;
                
                element.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
            });
            
            element.addEventListener('touchend', () => {
                element.style.transform = 'rotateX(0deg) rotateY(0deg)';
            });
        });
    }

    setupMobileProgressRing() {
        const progressRing = document.getElementById('progress-ring');
        if (progressRing) {
            const circumference = 2 * Math.PI * 35;
            progressRing.style.strokeDasharray = circumference;
            progressRing.style.strokeDashoffset = circumference;
        }
    }

    updateMobileProgress(percentage) {
        const progressRing = document.getElementById('progress-ring');
        const progressText = document.getElementById('completion-percentage');
        
        if (progressRing && progressText) {
            const circumference = 2 * Math.PI * 35;
            const offset = circumference - (percentage / 100) * circumference;
            progressRing.style.strokeDashoffset = offset;
            progressText.textContent = `${percentage}%`;
        }
    }

    setupMobileAnimations() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('mobile-slide-in');
                }
            });
        }, observerOptions);
        
        const animatedElements = document.querySelectorAll('.practice-card, .motivation-card, .method-card');
        animatedElements.forEach(el => observer.observe(el));
    }

    setupMobileConfetti() {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        this.createConfetti = () => {
            const confettiContainer = document.getElementById('mobile-confetti');
            if (!confettiContainer) return;
            
            confettiContainer.innerHTML = '';
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti-piece';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.animationDelay = Math.random() * 2 + 's';
                confetti.style.background = [
                    'var(--accent-primary)',
                    'var(--accent-secondary)',
                    'var(--accent-tertiary)',
                    'var(--accent-purple)'
                ][Math.floor(Math.random() * 4)];
                
                confettiContainer.appendChild(confetti);
            }
            
            setTimeout(() => {
                confettiContainer.innerHTML = '';
            }, 3000);
        };
    }

    setupMobileSpotlight() {
        const spotlightElements = document.querySelectorAll('.mobile-spotlight');
        
        spotlightElements.forEach(element => {
            element.addEventListener('touchmove', (e) => {
                const rect = element.getBoundingClientRect();
                const x = e.touches[0].clientX - rect.left;
                const y = e.touches[0].clientY - rect.top;
                
                element.style.setProperty('--mouse-x', x + 'px');
                element.style.setProperty('--mouse-y', y + 'px');
            });
        });
    }

    setupMobileMagnetic() {
        const magneticElements = document.querySelectorAll('.mobile-magnetic');
        
        magneticElements.forEach(element => {
            element.addEventListener('touchmove', (e) => {
                const rect = element.getBoundingClientRect();
                const x = e.touches[0].clientX - rect.left - rect.width / 2;
                const y = e.touches[0].clientY - rect.top - rect.height / 2;
                
                const distance = Math.sqrt(x * x + y * y);
                const maxDistance = Math.sqrt((rect.width / 2) ** 2 + (rect.height / 2) ** 2);
                
                if (distance < maxDistance) {
                    const magneticX = (x / maxDistance) * 10;
                    const magneticY = (y / maxDistance) * 10;
                    
                    element.style.setProperty('--magnetic-x', magneticX + 'px');
                    element.style.setProperty('--magnetic-y', magneticY + 'px');
                    element.classList.add('magnetic');
                }
            });
            
            element.addEventListener('touchend', () => {
                element.classList.remove('magnetic');
            });
        });
    }

    setupMobileVibration() {
        // –°–∏–º—É–ª—è—Ü–∏—è –≤–∏–±—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ CSS –∞–Ω–∏–º–∞—Ü–∏—é
        this.addMobileVibration = () => {
            const elements = document.querySelectorAll('.btn, .practice-card, .motivation-card');
            elements.forEach(el => {
                el.classList.add('mobile-vibrate');
                setTimeout(() => {
                    el.classList.remove('mobile-vibrate');
                }, 100);
            });
        };
    }

    // ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

    setupTheme() {
        const currentTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', currentTheme);
        
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => {
                const currentTheme = document.documentElement.getAttribute('data-theme');
                const newTheme = currentTheme === 'light' ? 'dark' : 'light';
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                
                const icon = themeToggle.querySelector('i');
                icon.className = newTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (this.isMobile) {
                    this.addMobileVibration();
                }
            });
            
            const icon = themeToggle.querySelector('i');
            icon.className = currentTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
        }
    }

    setupNavigation() {
        const navToggle = document.getElementById('nav-toggle');
        const navMenu = document.querySelector('.nav-menu');
        
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navMenu.classList.toggle('active');
                navToggle.classList.toggle('active');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (this.isMobile) {
                    this.addMobileVibration();
                }
            });
        }
    }

    updateDate() {
        const dateElement = document.getElementById('current-date');
        const today = new Date();
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        dateElement.textContent = today.toLocaleDateString('ru-RU', options);
    }

    renderExercises() {
        const exercisesList = document.getElementById('exercises-list');
        exercisesList.innerHTML = '';

        this.exercises.forEach(exercise => {
            const exerciseElement = document.createElement('div');
            exerciseElement.className = `exercise-item ${exercise.completed ? 'completed' : ''}`;
            exerciseElement.innerHTML = `
                <div class="exercise-info">
                    <div class="exercise-icon">${exercise.icon}</div>
                    <div class="exercise-details">
                        <h4>${exercise.name}</h4>
                        <p>${exercise.description}</p>
                        <span class="exercise-duration">${exercise.duration}</span>
                    </div>
                </div>
                <div class="exercise-actions">
                    <button class="btn btn-outline btn-small complete-btn touch-ripple" data-id="${exercise.id}">
                        ${exercise.completed ? '<i class="fas fa-check"></i> –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–û—Ç–º–µ—Ç–∏—Ç—å'}
                    </button>
                </div>
            `;
            
            exercisesList.appendChild(exerciseElement);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const completeBtns = document.querySelectorAll('.complete-btn');
        completeBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const exerciseId = parseInt(btn.dataset.id);
                this.toggleExercise(exerciseId);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                if (this.isMobile && this.exercises.find(ex => ex.id === exerciseId)?.completed) {
                    this.createConfetti();
                }
            });
        });
    }

    toggleExercise(exerciseId) {
        const exercise = this.exercises.find(ex => ex.id === exerciseId);
        if (exercise) {
            exercise.completed = !exercise.completed;
            this.updateExerciseStats();
            this.renderExercises();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            if (this.isMobile) {
                this.addMobileVibration();
            }
        }
    }

    updateExerciseStats() {
        const completedCount = this.exercises.filter(ex => ex.completed).length;
        const totalCount = this.exercises.length;
        const percentage = Math.round((completedCount / totalCount) * 100);
        
        document.getElementById('completed-count').textContent = `${completedCount}/${totalCount}`;
        document.getElementById('completion-percentage').textContent = `${percentage}%`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ä–∏–Ω–≥
        if (this.isMobile) {
            this.updateMobileProgress(percentage);
        }
    }

    renderChecklist() {
        const checklist = document.getElementById('daily-checklist');
        checklist.innerHTML = '';

        this.dailyChecklist.forEach((item, index) => {
            const checklistItem = document.createElement('div');
            checklistItem.className = 'checklist-item';
            checklistItem.innerHTML = `
                <label class="checkbox-container">
                    <input type="checkbox" data-index="${index}">
                    <span class="checkmark"></span>
                    <span class="checklist-text">${item}</span>
                </label>
            `;
            
            checklist.appendChild(checklistItem);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        const checkboxes = document.querySelectorAll('.checklist-item input[type="checkbox"]');
        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (this.isMobile) {
                    this.addMobileVibration();
                }
            });
        });
    }

    setupMotivationSlider() {
        // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –º–æ—Ç–∏–≤–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const motivationSection = document.querySelector('.motivation-section');
        if (motivationSection && !document.getElementById('motivation-slider')) {
            const sliderHTML = `
                <div class="motivation-slider" id="motivation-slider">
                    <div class="slider-content">
                        <div class="quote-text" id="quote-text"></div>
                        <div class="quote-author" id="quote-author"></div>
                    </div>
                    <div class="slider-controls">
                        <button class="slider-btn" id="prev-quote">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <div class="slider-dots" id="slider-dots"></div>
                        <button class="slider-btn" id="next-quote">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            `;
            
            motivationSection.querySelector('.container').insertAdjacentHTML('beforeend', sliderHTML);
            this.createDots();
            this.showQuote(0);
        }
    }

    showQuote(index) {
        const quote = this.quotes[index];
        const quoteText = document.getElementById('quote-text');
        const quoteAuthor = document.getElementById('quote-author');
        
        if (quoteText && quoteAuthor && quote) {
            quoteText.textContent = quote.text;
            quoteAuthor.textContent = `‚Äî ${quote.author}`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–æ—á–∫—É
            const dots = document.querySelectorAll('.slider-dot');
            dots.forEach((dot, i) => {
                dot.classList.toggle('active', i === index);
            });
        }
    }

    createDots() {
        const dotsContainer = document.getElementById('slider-dots');
        if (dotsContainer) {
            dotsContainer.innerHTML = '';
            
            this.quotes.forEach((_, index) => {
                const dot = document.createElement('span');
                dot.className = `slider-dot ${index === 0 ? 'active' : ''}`;
                dot.addEventListener('click', () => {
                    this.currentQuoteIndex = index;
                    this.showQuote(index);
                });
                dotsContainer.appendChild(dot);
            });
        }
    }

    prevQuote() {
        this.currentQuoteIndex = (this.currentQuoteIndex - 1 + this.quotes.length) % this.quotes.length;
        this.showQuote(this.currentQuoteIndex);
    }

    nextQuote() {
        this.currentQuoteIndex = (this.currentQuoteIndex + 1) % this.quotes.length;
        this.showQuote(this.currentQuoteIndex);
    }

    updateStats() {
        const daysCompleted = this.getStreakDays();
        const tasksCompleted = this.exercises.filter(ex => ex.completed).length;
        const productivityScore = Math.round((tasksCompleted / this.exercises.length) * 100);
        
        document.getElementById('days-completed').textContent = daysCompleted;
        document.getElementById('tasks-completed').textContent = tasksCompleted;
        document.getElementById('productivity-score').textContent = `${productivityScore}%`;
    }

    getStreakDays() {
        const savedProgress = localStorage.getItem('mindmotivx_progress');
        if (savedProgress) {
            const progress = JSON.parse(savedProgress);
            return progress.streakDays || 0;
        }
        return 0;
    }

    saveProgress() {
        const progress = {
            exercises: this.exercises,
            date: new Date().toISOString(),
            streakDays: this.getStreakDays() + 1
        };
        
        localStorage.setItem('mindmotivx_progress', JSON.stringify(progress));
        this.showNotification('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if (this.isMobile) {
            this.createConfetti();
        }
    }

    loadProgress() {
        const savedProgress = localStorage.getItem('mindmotivx_progress');
        if (savedProgress) {
            const progress = JSON.parse(savedProgress);
            const savedDate = new Date(progress.date);
            const today = new Date();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            if (savedDate.toDateString() === today.toDateString()) {
                this.exercises = progress.exercises || this.exercises;
            }
        }
    }

    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span>${message}</span>
                <button class="notification-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            notification.classList.remove('show');
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 300);
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }
                }, 300);
            }
        }, 3000);
    }

    setupMotivationCards() {
        const motivationCards = document.querySelectorAll('.motivation-card');
        
        motivationCards.forEach(card => {
            card.addEventListener('click', () => {
                const text = card.querySelector('p').textContent;
                const icon = card.querySelector('.card-icon').textContent;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–±—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
                if (this.isMobile) {
                    this.addMobileVibration();
                }
                
                this.shareMotivationCard('–ú–æ—Ç–∏–≤–∞—Ü–∏—è', text, 'mindmotivx');
            });
        });
    }

    shareMotivationCard(title, text, category) {
        if (navigator.share && this.isMobile) {
            navigator.share({
                title: title,
                text: text,
                url: window.location.href
            }).then(() => {
                this.showNotification('–ü–æ–¥–µ–ª–∏–ª–∏—Å—å –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π!', 'success');
            }).catch(() => {
                this.copyToClipboard(text);
            });
        } else {
            this.copyToClipboard(text);
        }
    }

    copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(() => {
                this.showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
            }).catch(() => {
                this.fallbackCopyToClipboard(text);
            });
        } else {
            this.fallbackCopyToClipboard(text);
        }
    }

    fallbackCopyToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            document.execCommand('copy');
            this.showNotification('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
        } catch (err) {
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç', 'error');
        }
        
        document.body.removeChild(textArea);
    }

    setupCardFiltering() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–µ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const filterButtons = document.querySelectorAll('.filter-btn');
        
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const category = btn.dataset.category;
                this.filterCards(category);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });
    }

    filterCards(category) {
        const cards = document.querySelectorAll('.motivation-card');
        
        cards.forEach(card => {
            if (category === 'all' || card.dataset.category === category) {
                card.style.display = 'block';
                card.classList.add('mobile-slide-in');
            } else {
                card.style.display = 'none';
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MindMotivX();
}); 